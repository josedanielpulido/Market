@rendermode InteractiveServer
@page "/facturaform/{numeroFactura:int?}"
@using BlazorMarket.Models
@inject MarketContext _context
@inject NavigationManager navigationManager

<h3>@(numeroFactura.HasValue ? "Editar Factura" : "Nueva Factura")</h3>

<EditForm Model="factura" OnValidSubmit="GuardarFactura">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">RUC:</label>
        <InputText @bind-Value="factura.Ruc" class="form-control" placeholder="RUC del cliente" />
    </div>

    <div class="mb-3">
        <label class="form-label">Razón Social:</label>
        <InputText @bind-Value="factura.RazonSocial" class="form-control" placeholder="Razón social" />
    </div>

    <div class="mb-3">
        <label class="form-label">Fecha:</label>
        <InputDate @bind-Value="factura.Fecha" class="form-control" />
    </div>

    <div class="mb-3">
        <label class="form-label">Total:</label>
        <InputNumber @bind-Value="factura.Total" class="form-control" placeholder="Total de la factura" />
    </div>

    <button type="submit" class="btn btn-primary">Guardar</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
</EditForm>

@code {
    private Factura factura = new Factura();
    [Parameter] public int? numeroFactura { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (numeroFactura.HasValue)
        {
            factura = await _context.Facturas.FindAsync(numeroFactura.Value);
        }
    }

    async Task GuardarFactura()
    {
        if (numeroFactura.HasValue)
        {
            _context.Facturas.Update(factura);
        }
        else
        {
            _context.Facturas.Add(factura);
        }
        await _context.SaveChangesAsync();
        navigationManager.NavigateTo("/facturas");
    }

    void Cancelar()
    {
        navigationManager.NavigateTo("/facturas");
    }
}
